.include "nominal.jsim"
.include "stdcell.jsim"
.include "2dcheckoff_3ns.jsim"

.subckt xorv2 A B C
Xnand6 A B D nand2
Xnand7 A D C1 nand2
Xnand8 B D C2 nand2
Xnand9 C1 C2 C nand2
.ends

.subckt orv2 A B C
Xinv2 A invA inverter
Xinv3 B invB inverter
Xnand5 invA invB C nand2
.ends

*blocky
*inp A B C
*output xG xP S
.subckt blocky A B C xG xP S
Xnandy A B xG nand2
Xnory A B xP nor2
Xxory1 A B D xor2
Xxory2 C D S xor2
.ends

*blockx
*inp Gh Ph Gl Pl Cl
*output xGhl xPhl xCl xCh
*xCh = NOT ((Cl AND Pl) OR Gl)
*xGhl = NOT ((Gl AND Ph) OR Gh)
*xPhl = Pl NAND Ph
.subckt blockx Gh Ph Gl Pl Cl xGhl xPhl xCl xCh
Xaoi21x1 Cl Pl Gl xCh aoi21
Xaoi21x2 Gl Ph Gh xGhl aoi21
Xnandx Pl Ph xPhl nand2
Xinvx Cl xCl inverter
.ends

*xblockx
*inp xGh xPh xGl xPl Cl
*output Ghl Phl xCl Ch
*xCh = NOT ((Cl OR xPl) AND xGl)
*Ghl = NOT ((xGl OR xPh) AND xGh)
*Phl = xPl NOR xPh
.subckt xblockx xGh xPh xGl xPl Cl Ghl Phl xCl Ch
Xoai21xx1 Cl xPl xGl Ch oai21
Xoai21xx2 xGl xPh xGh Ghl oai21
Xnorxx xPl xPh Phl nor2
Xinvx Cl xCl inverter
.ends

.subckt link A B
.connect A B
.ends

.subckt adder32 op0 A[31:0] B[31:0] S[31:0] z v n
*Check Addition or Subtraction
Xxor1 B[31:0] op0#32 XB[31:0] xor2
Xinvc0 op0 xC0 inverter

*Generating G, P and S
Xblocky A[31:0] XB[31:0] C0r[31:0] xG0r[31:0] xP0r[31:0] S[31:0] blocky
*Row1: input/output#0 xGP C
Xxblockx1a xG0r[31:30] xP0r[31:30] xG0r[30:29] xP0r[30:29] xC1r[31:30] G1r[31:30] P1r[31:30] C0r[30:0:2] C0r[31:1:2] xblockx
Xxblockx1b xG0r[31:1] xP0r[31:1] xG0r[30:0] xP0r[30:0] xC1r[31:1:2] G1r[31:1:2] P1r[31:1:2] C0r[30:0:2] C0r[31:1:2] xblockx
*Row2: input/output#1 GP xC
Xblockx2 G1r[31:3:4] P1r[31:3:4] G1r[29:1:4] P1r[29:1:4] C2r[31:3:4] xG2r[31:3:4] xP2r[31:3:4] xC1r[29:1:4] xC1r[31:3:4] blockx
*Row3: input/output#2 xGP C
Xxblockx3 xG2r[31:7:8] xP2r[31:7:8] xG2r[27:3:8] xP2r[27:3:8] xC3r[31:7:8] G3r[31:7:8] P3r[31:7:8] C2r[27:3:8] C2r[31:7:8] xblockx
*Row4: input/output#3 GP xC
Xblockx4 G3r[31:15:16] P3r[31:15:16] G3r[23:7:16] P3r[23:7:16] C4r[31:15:16] xG4r[31:15:16] xP4r[31:15:16] xC3r[23:7:16] xC3r[31:15:16] blockx
*Row5: input/output#4 xGP C
Xxblockx5 xG4r31 xP4r31 xG4r15 xP4r15 xC0 G5r31 P4r31 C4r15 C4r31 xblockx

*Generating S
*Ci = Gi
*Si = Ci XOR initialPi
Xxors0 P0c0 op0 S0 xor2
Xxors P0c[31:1] G5c[30:0] S[31:1] xor2

*Generating z
*z = NOT ((S0 OR S1 OR S2 OR S3) OR (S4 OR S5 OR S6 OR S7) OR (S8 OR S9 OR S10 OR S11) OR (S12 OR S13 OR S14 OR S15) OR (S16 OR S17 OR S18 OR S19) OR (S20 OR S21 OR S22 OR S23) OR (S24 OR S25 OR S26 OR S27) OR (S28 OR S29 OR S30 OR S31))
Xnorz1 S[31:16] S[15:0] Sa[15:0] nor2
Xnandz1 Sa[15:8] Sa[7:0] Sb[7:0] nand2
Xnorz2 Sb[7:4] Sb[3:0] Sc[3:0] nor2
Xnandz2 Sc[3:2] Sc[1:0] Sd[1:0] nand2
Xnorz3 Sd1 Sd0 z nor2

*Generating v
*v = (A AND B AND NOT S) OR (NOT A AND NOT B AND S)
*v = (A NAND B NAND NOT S) NAND (NOT A NAND NOT B NAND S)
Xnandv1 A31 XB31 xAB nand2
Xorv2v S31 xAB SxAB orv2
Xnorv1 A31 XB31 nAB nor2
Xnandv3 S31 nAB SnAB nand2
Xnandv4 SxAB SnAB v nand2

*Generating n
.connect S31 n

.ends